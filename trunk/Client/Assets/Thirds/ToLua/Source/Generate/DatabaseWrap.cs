//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DatabaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Database), typeof(Assets.Script.Frame.Singleton<Database>));
		L.RegFunction("Open", Open);
		L.RegFunction("Close", Close);
		L.RegFunction("GetById", GetById);
		L.RegFunction("GetAll", GetAll);
		L.RegFunction("New", _CreateDatabase);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDatabase(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Database obj = new Database();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Database.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Database obj = (Database)ToLua.CheckObject(L, 1, typeof(Database));
			obj.Open();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Database obj = (Database)ToLua.CheckObject(L, 1, typeof(Database));
			obj.Close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetById(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Database obj = (Database)ToLua.CheckObject(L, 1, typeof(Database));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			object o = obj.GetById(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Database obj = (Database)ToLua.CheckObject(L, 1, typeof(Database));
			System.Type arg0 = (System.Type)ToLua.CheckObject(L, 2, typeof(System.Type));
			object[] o = obj.GetAll(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

