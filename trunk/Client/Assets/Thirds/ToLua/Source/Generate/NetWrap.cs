//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Net), typeof(Assets.Script.Frame.Singleton<Net>));
		L.RegFunction("DisConncet", DisConncet);
		L.RegFunction("Connect", Connect);
		L.RegFunction("RecvFunc", RecvFunc);
		L.RegFunction("Send2", Send2);
		L.RegFunction("TickFunc", TickFunc);
		L.RegFunction("Close", Close);
		L.RegFunction("New", _CreateNet);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNet(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Net obj = new Net();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Net.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisConncet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			obj.DisConncet();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			System.Action arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action)ToLua.CheckObject(L, 4, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.Connect(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecvFunc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			obj.RecvFunc();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Send2(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TickFunc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			obj.TickFunc();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Net obj = (Net)ToLua.CheckObject(L, 1, typeof(Net));
			obj.Close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

