//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Assets_Script_Frame_PanelManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Assets.Script.Frame.PanelManager), typeof(Assets.Script.Frame.Singleton<Assets.Script.Frame.PanelManager>));
		L.RegFunction("Regist", Regist);
		L.RegFunction("RegistPrefab", RegistPrefab);
		L.RegFunction("Get", Get);
		L.RegFunction("HideAll", HideAll);
		L.RegFunction("RefreshAll", RefreshAll);
		L.RegFunction("New", _CreateAssets_Script_Frame_PanelManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("InstanceUiBase", get_InstanceUiBase, set_InstanceUiBase);
		L.RegFunction("FuncInstanceUiBase", Assets_Script_Frame_PanelManager_FuncInstanceUiBase);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAssets_Script_Frame_PanelManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Assets.Script.Frame.PanelManager obj = new Assets.Script.Frame.PanelManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Assets.Script.Frame.PanelManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Regist(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Assets.Script.Frame.PanelManager obj = (Assets.Script.Frame.PanelManager)ToLua.CheckObject(L, 1, typeof(Assets.Script.Frame.PanelManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Assets.Script.Frame.PanelBase arg1 = (Assets.Script.Frame.PanelBase)ToLua.CheckUnityObject(L, 3, typeof(Assets.Script.Frame.PanelBase));
			obj.Regist(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegistPrefab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Assets.Script.Frame.PanelManager obj = (Assets.Script.Frame.PanelManager)ToLua.CheckObject(L, 1, typeof(Assets.Script.Frame.PanelManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Assets.Script.Frame.PanelBase arg1 = (Assets.Script.Frame.PanelBase)ToLua.CheckUnityObject(L, 3, typeof(Assets.Script.Frame.PanelBase));
			obj.RegistPrefab(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Assets.Script.Frame.PanelManager obj = (Assets.Script.Frame.PanelManager)ToLua.CheckObject(L, 1, typeof(Assets.Script.Frame.PanelManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Assets.Script.Frame.PanelBase o = obj.Get(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Assets.Script.Frame.PanelManager obj = (Assets.Script.Frame.PanelManager)ToLua.CheckObject(L, 1, typeof(Assets.Script.Frame.PanelManager));
			obj.HideAll();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Assets.Script.Frame.PanelManager obj = (Assets.Script.Frame.PanelManager)ToLua.CheckObject(L, 1, typeof(Assets.Script.Frame.PanelManager));
			obj.RefreshAll();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InstanceUiBase(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Assets.Script.Frame.PanelManager obj = (Assets.Script.Frame.PanelManager)o;
			Assets.Script.Frame.PanelManager.FuncInstanceUiBase ret = obj.InstanceUiBase;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstanceUiBase on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InstanceUiBase(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Assets.Script.Frame.PanelManager obj = (Assets.Script.Frame.PanelManager)o;
			Assets.Script.Frame.PanelManager.FuncInstanceUiBase arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (Assets.Script.Frame.PanelManager.FuncInstanceUiBase)ToLua.CheckObject(L, 2, typeof(Assets.Script.Frame.PanelManager.FuncInstanceUiBase));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(Assets.Script.Frame.PanelManager.FuncInstanceUiBase), func) as Assets.Script.Frame.PanelManager.FuncInstanceUiBase;
			}

			obj.InstanceUiBase = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstanceUiBase on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Assets_Script_Frame_PanelManager_FuncInstanceUiBase(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(Assets.Script.Frame.PanelManager.FuncInstanceUiBase), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(Assets.Script.Frame.PanelManager.FuncInstanceUiBase), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

